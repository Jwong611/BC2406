#============================================================================================================
# Purpose:      Group Project
# Author:       Rahh Group
# DOC:          25-10-2024
# Data Source:  credit_risk_dataset.csv
#============================================================================================================

# Importing Necessary Libraries
library(data.table)     # fread
library(ggplot2)        # plots
library(ggcorrplot)     # correlation plots
library(rpart)          # CART
library(rpart.plot)     # enhanced tree plots
library(caTools)        # train-test split
library(car)            # multi-collinearity
library(dplyr)

# Importing data file and store it as data table data
data <- fread('credit_risk_dataset.csv')
summary(data)
dim(data)

# Show whole numbers instead of scientific notation
options("scipen" = 100)

#-----------------------------------------------------------------------------------------------------------#
# Data Cleaning
#-----------------------------------------------------------------------------------------------------------#
# Dropping rows with age more than 120, human lifespan may go up to a max of 120
data <- data[data$person_age < 120, ]

# Dropping rows where their employment years are more than their age
data <- data[data$person_emp_length < data$person_age, ]

# Taking out rows that have any NA values 
data <- na.omit(data)


# Factoring Variables
data$person_home_ownership <- factor(data$person_home_ownership)
data$loan_intent <- factor(data$loan_intent)
data$cb_person_default_on_file <- factor(data$cb_person_default_on_file)
data$loan_status <- factor(data$loan_status,
                           levels = c(0,1),
                           labels = c("Non-Default","Default"))

#-----------------------------------------------------------------------------------------------------------#
# Data Exploration
#-----------------------------------------------------------------------------------------------------------#
########################################## Univariate Analysis ############################################

########################################## Continuous Variables ############################################

# Age Plot
ggplot(data = data, aes(x = person_age)) + geom_histogram()

# Income Plot
ggplot(data = data, aes(y = log(person_income) , x = factor(1))) + geom_boxplot()

# Employment Length (in years) Plot
ggplot(data = data, aes(x = person_emp_length)) + geom_histogram()

# Loan Amount Plot
ggplot(data = data, aes(x = loan_amnt)) + geom_histogram()

# Loan Interest Rate Plot
ggplot(data = data, aes(x = loan_int_rate)) + geom_histogram()

# Loan Percent Income plot
ggplot(data = data, aes(y = loan_percent_income , x = factor(1))) + geom_boxplot()

# Credit History Length Plot
ggplot(data = data, aes(x = cb_person_cred_hist_length)) + geom_histogram()

########################################## Categorical Variables ############################################
# Home Ownership plot
ggplot(data = data, aes(x = person_home_ownership)) + geom_bar()

# Loan Intent Plot
# Renaming variables under loan_intent to make plot clearer
data_short <- data %>%
  mutate(loan_intent = recode(loan_intent,
                              "PERSONAL" = "Per",
                              "EDUCATION" = "Edu",
                              "MEDICAL" = "Med",
                              "VENTURE" = "Ven",
                              "HOMEIMPROVEMENT" = "Home",
                              "DEBTCONSOLIDATION" = "Debt"))
ggplot(data = data_short, aes(x = loan_intent)) + geom_bar()

# Loan Status Plot
ggplot(data = data_short, aes(x = loan_status)) + geom_bar()

# Historical Loan Defaults Plot
ggplot(data = data_short, aes(x = cb_person_default_on_file)) + geom_bar()

########################################## Categorical Variables ############################################
# Distribution of Customers' Home Ownership Status
ggplot(data, aes(x = person_home_ownership)) + 
  geom_bar(fill = "lightpink") +
  geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.5) +
  labs(title = "Distribution of Customers' Home Ownership", x = "Home Ownership", y = "Count")

# Distribution of Customers' Loan Intent
ggplot(data, aes(x = loan_intent)) + 
  geom_bar(fill = "lightpink") +
  geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.5) +
  labs(title = "Distribution of Customers' Loan Intent", x = "Loan Intent", y = "Count")

# Distribution of Customers' Loan Status
ggplot(data, aes(x = loan_status)) + 
  geom_bar(fill = "lightpink") +
  geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.5) +
  labs(title = "Distribution of Customers' Loan Status", x = "Loan Status", y = "Count")

# Distribution of Customers' with Historical Defaults
ggplot(data, aes(x = cb_person_default_on_file)) + 
  geom_bar(fill = "lightpink") +
  geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.5) +
  labs(title = "Distribution of Customers' Historical Defaults", x = "Historical Defaults", y = "Count")

# Distribution of Customers' Credit History Length
ggplot(data, aes(x = cb_person_cred_hist_length)) + 
  geom_bar(fill = "lightpink") +
  geom_text(stat = "count", aes(label = after_stat(count)), vjust = -0.5) +
  labs(title = "Distribution of Customers' Credit History Length", x = "Credit History Length", y = "Count")

########################################## Continuous Variables ############################################
# Distribution of customer's age
ggplot(data, aes(x = person_age)) + geom_histogram(aes(y = after_stat(count)), fill = "lightpink", bins = 30) +
  labs(title = "Distribution of Customers' Age", x = "Age (Years)") # Age is very right skewed

ggplot(data, aes(y = person_age)) + geom_boxplot(fill = "lightpink") +
  labs(title = "Distribution of Customers' Age")

# Distribution of customer's income
ggplot(data, aes(x = person_income)) + geom_histogram(aes(y = after_stat(count)), fill = "lightpink", bins = 30) +
  labs(title = "Distribution of Customers' Income", x = "Income (S$)") # Income is very right skewed

ggplot(data, aes(y = person_income)) + geom_boxplot(fill = "lightpink") +
  labs(title = "Distribution of Customers' Income")

# Distribution of Customers' Length of Employment
ggplot(data, aes(x = person_emp_length)) + geom_histogram(aes(y = after_stat(count)), fill = "lightpink", bins = 30) +
  labs(title = "Distribution of Customers' Employment Length", x = " Length of Employment (Years)")

ggplot(data, aes(y =  person_emp_length)) + geom_boxplot(fill = "lightpink") + 
  labs(title = "Distribution of Customers' Employment Length", y = "Length of Employment (Years)")

# Distribution of Loan Interest Rates
ggplot(data, aes(x = loan_int_rate)) + geom_histogram(aes(y = after_stat(count)), fill = "lightpink", bins = 30) +
  labs(title = "Distribution of Loan Interest Rates", x = " Loan Interest Rates")

ggplot(data, aes(y =  loan_int_rate)) + geom_boxplot(fill = "lightpink") + 
  labs(title = "Distribution of Loan Interest Rates", y = "Loan Interest Rates")

# Distribution of Customer's Loan Amount
ggplot(data, aes(x = loan_amnt)) + geom_histogram(aes(y = after_stat(count)), fill = "lightpink", bins = 30) +
  labs(title = "Distribution of Customer's Loan Amounts", x = " Loan Amounts")

ggplot(data, aes(y =  loan_amnt)) + geom_boxplot(fill = "lightpink") + 
  labs(title = "Distribution of Customers' Loan Amount", y = "Loan Amount (S$)")

# Distribution of Customers' Credit History Length
ggplot(data, aes(y =  cb_person_cred_hist_length)) + geom_boxplot(fill = "lightpink") + 
  labs(title = "Distribution of Customers' Credit History Length", y = "Credit History Length (Years)")

ggplot(data, aes(y =  cb_person_cred_hist_length)) + geom_boxplot(fill = "lightpink") + 
  labs(title = "Distribution of Customers' Credit History Length", y = "Credit History Length (Years)")

############################################# Correlation Matrix #################################################
data_copy <- copy(data)

factor_variables <- c("person_home_ownership", "loan_intent", "cb_person_default_on_file", "loan_status")

# Converting factorized variables to numbers for correlation plot
data_copy[, (factor_variables) := lapply(.SD, as.numeric), .SDcols = factor_variables]

# Plotting a correlation plot
ggcorrplot(round(cor(data_copy),3), hc.order = TRUE, lab = TRUE) + labs(title= "Correlation Matrix")

############################################ Bivariate Analysis #################################################
# Loan Interest Rate vs Historical Loan Defaults
ggplot(data, aes(y = loan_int_rate)) + geom_boxplot(fill = "lightgreen") +
  facet_wrap(~ cb_person_default_on_file) +
  labs(title = "Loan Interest Rates in historical loan defaults")

# Customers' Age vs Credit History Length
ggplot(data, aes(x = person_age, y = cb_person_cred_hist_length)) +
  geom_point() + scale_y_continuous() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Customers' Age vs Credit History Length", x = "Customers' Age (Years)", y = "Credit History Length (Years)")

# Customers' Home Ownership Status vs Income
ggplot(data, aes(y = person_income)) + geom_boxplot(fill = "lightgreen") +
  facet_wrap(~ person_home_ownership) +
  labs(title = "Customers' Income Distrbution in Relation to Home Ownership Status")

# Loan percentage of Income Vs Loan Status
ggplot(data, aes(y = loan_percent_income)) + geom_boxplot(fill = "lightgreen") +
  facet_wrap(~ loan_status) +
  labs(title = "Customers' loan percentage in relation to Loan Status")

#-----------------------------------------------------------------------------------------------------------#
# Data Transformation
#-----------------------------------------------------------------------------------------------------------#
# Log of income
data$person_income <- log(data$person_income + 1) 

#-----------------------------------------------------------------------------------------------------------#
# Building & Evaluating Models
#-----------------------------------------------------------------------------------------------------------#

# Train-Test Split
set.seed(2)

train <- sample.split(data$loan_status, SplitRatio = 0.7)

trainset <- subset(data, train == T)
testset <- subset(data, train == F)

#############################################################################################

# Logistic regression
m1 <- glm(loan_status ~ ., data = trainset , family = binomial)

m1.prob <- predict(m1 , newdata=testset , type = "response")
m1.pred <- ifelse(m1.prob > 0.5 , "Default" , "Non-Default")

# Confusion Matrix
table(actual = testset$loan_status, prediction = m1.pred)
# Accuracy of the model
mean(testset$loan_status == m1.pred)

# Updated Logistic Model
m2 <- step(m1, direction = "backward")
m2.prob <- predict(m2 , newdata=testset , type = "response")
m2.pred <- ifelse(m2.prob > 0.5 , "Default" , "Non-Default")

# Confusion Matrix
table(actual = testset$loan_status, prediction = m2.pred)

# Accuracy of the model
mean(testset$loan_status == m2.pred)

# Checking for multi-collinearity
vif(m2)

#############################################################################################
# CART Decision Tree
# Maximal Tree
m3 <- rpart(loan_status ~ ., data = trainset, method = "class", 
            control = rpart.control(minsplit = 2, cp = 0))


# Display the pruning sequence and 10-fold CV errors, as a chart.
plotcp(m3, main = "Subtrees in credit risk.csv")

# Extracting the optimal tree
# Compute min CVerror + 1SE in maximal tree.
CVerror.cap <- m3$cptable[which.min(m3$cptable[,"xerror"]), "xerror"] + 
  m3$cptable[which.min(m3$cptable[,"xerror"]), "xstd"]

# Find the optimal CP region whose CV error is just below CVerror.cap in maximal tree cart.
i <- 1; j<- 4
while (m3$cptable[i,j] > CVerror.cap){
  i <- i + 1
}

# Get geometric mean of the two identified CP values in the optimal region if optimal tree has at least one split.
cp.opt = ifelse(i > 1, sqrt(m3$cptable[i,1] * m3$cptable[i-1,1]), 1)

# Prune the tree
m4 <- prune(m3, cp = cp.opt)

# Evaluating Pruned Tree
m4.prob <- predict(m4 , newdata = testset , type = "prob")

m4.pred <- ifelse(m4.prob[, 2] > 0.5, "Default", "Non-Default")

table(actual = testset$loan_status, prediction = m4.pred)

mean(testset$loan_status == m4.pred)

#############################################################################################
#Linear Regression

set.seed(2)
library(glm2)
library(caTools)

train <- sample.split(data$loan_amnt , SplitRatio = 0.7)

trainset <- subset(data , train == T)
testset <- subset(data , train ==F)

m1 <- lm(loan_amnt ~ ., data = trainset)

summary(m1)

m1_pred <- predict(m1 , newdata=testset)

# Step 3: Calculate RMSE
rmse <- sqrt(mean((m1_pred - testset$loan_amnt)^2))

# Output RMSE
print(rmse)

updated_data = data[, ":="(person_age = NULL ,cb_person_default_on_fileY  = NULL ,  cb_person_cred_hist_length = NULL)]

train <- sample.split(updated_data$loan_amnt , SplitRatio = 0.7)

trainset <- subset(updated_data , train == T)
testset <- subset(updated_data , train ==F)

m1 <- lm(loan_amnt ~ ., data = trainset)

summary(m1)

m1_pred <- predict(m1 , newdata=testset)

# Step 3: Calculate RMSE
rmse <- sqrt(mean((m1_pred - testset$loan_amnt)^2))

# Output RMSE
print(rmse)

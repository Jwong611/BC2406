library(data.table)
library(caTools)        # train-test split
library(rpart)          # CART
library(rpart.plot)  

data <- fread('credit_risk_dataset.csv')

#Data Cleaning
#dropping rows with age more than 120 , human lifepsan may go up to a max of 120
data <- data[data$person_age < 120 , ]

#dropping rows where their employment years are more than their age
data <- data[data$person_emp_length < data$person_age , ]

#taking out rows that have any NA values 
data <- na.omit(data)

#############################################################################################
#logistic regression
set.seed(2)

train <- sample.split(data$loan_status , SplitRatio = 0.7)

trainset <- subset(data , train == T)
testset <- subset(data , train ==F)

m1 <- glm(loan_status ~ ., data = trainset , family = binomial)

m1.prob <- predict(m1 , newdata=testset , type = "response")
m1.pred <- ifelse(m1.prob > 0.5 , "Yes" , "No")

table(actual = testset$loan_status ,prediction = m1.pred)

mean(testset$loan_status == m1.pred)

summary(m1)
#############################################################################################
# CART Decision Tree
# Maximal Tree
m2 <- rpart(loan_status ~ ., data = trainset, method = "class", 
            control = rpart.control(minsplit = 2, cp = 0))


# Display the pruning sequence and 10-fold CV errors, as a chart.
plotcp(m2, main = "Subtrees in credit risk.csv")

# Extracting the optimal tree
# Compute min CVerror + 1SE in maximal tree.
CVerror.cap <- m2$cptable[which.min(m2$cptable[,"xerror"]), "xerror"] + 
  m2$cptable[which.min(m2$cptable[,"xerror"]), "xstd"]

# Find the optimal CP region whose CV error is just below CVerror.cap in maximal tree cart.
i <- 1; j<- 4
while (m2$cptable[i,j] > CVerror.cap){
  i <- i + 1
}

# Get geometric mean of the two identified CP values in the optimal region if optimal tree has at least one split.
cp.opt = ifelse(i > 1, sqrt(m2$cptable[i,1] * m2$cptable[i-1,1]), 1)

# Prune the tree
m3 <- prune(m2, cp = cp.opt)

m3.prob <- predict(m3 , newdata = testset , type = "prob")

m3.pred <- ifelse(m3.prob[, 2] > 0.5, "Default", "Not Default")
table(actual = testset$loan_status, prediction = m3.pred)
mean(testset$loan_status == m3.pred)

